@startuml
title 城管类图
class User <<用户实体类>>{
    -id: String
    -name : String
    -sts : int
}

class Dept<<责任部门实体类>>{
    -id: String
    -deptName : String
    -sts : int
    -level : String
    -parent : Dept
    -userList : User[*]
}

class Grid<<网格实体类>>{
    -id: String
    -gridCode : String
    -gridName : String
    -remark : String
    -kv : Kv    //代表所属区域
    -area : String
    -initialDate : date
    -terminationDate : date
    -sts : int
    -dept : Dept
    -user : User
    -release : Release
    -record : Record
    -publish : Publish
}

class Component<<部件实体类>>{
    -id: String
    -componentType : ComponentType
    -componentInfo : ComponentInfo
    -sts : int  // 用于记录该部件删除
    -publish : Publish
    -record : Record
}

class ComponentType<<部件分类实体类>>{
    -id: String
    -name: String
    -num: int
    -parent: ComponentType
}

class ComponentInfo<<部件信息实体类>>{
    -id : String
    -objId : String
    -objName : String
    -mainDeptCode : String
    -mainDept : String
    -ownershipDeptCode : String
    -ownershipDeptName : String
    -maintenanceDeptCode : String
    -maintenanceDeptName  : String
    -bgid : Grid
    -objState : Kv
    -initialDate : date
    -changeDate : date
    -dataSource : Kv
    -note : String
}

class Publish<<发布实体类>>{
    -id : String
    -name : String
    -layerId : String     //图层ID:当发布后GIS平台将把该图层ID返回城管中，城管再次添加元素可以找到对应GIS平台的哪个图层
    -url : String         //GIS平台提供的发布的图层地址
    -kv : Kv              //类型：编辑的是部件、网格。
    -sts : int            //状态：用于判断是发布、未发布状态
    -user : User          //用于记录谁发布的
    -componentType : ComponentType
}
class Record<<编辑实体类>>{
    -id : String
    -coordinate : String  //坐标
    -user : User
    -publish : Publish
    -sts : int //判断该记录是编辑中、发布
}

class Kv<<Kv实体类>>{
    -id : String
    -tableName : String
    -fieldName : String
    -value : String
    -sts : int
}

class Event<<事件实体类>>{
    -id : String
    -eventCode : String
    -eventTypeId : EventType
    -conditionId : Condition
    -describe : String
    -timeLimit : TimeLimit
    -gridId : Grid
    -location : String
    -name : User
    -phone : int
    -eventSource : Kv
    -cadate : date
    -longitude : double
    -latitude : double
    -region : Kv


}

class EventType<<事件分类实体类>>{
    -eventTypeId : String
    -eventTypeName : String
    -mainTypeId : String
    -mainTypeName : String
    -subTypeId : String
    -subTypeName : String
}

class EventFile<<事件附件实体类>>{
    -id : String
    -fileName : String
    -eventId : Event
    -fileType ：int
}
class Condition<<立案条件实体类>>{
    -id : String
    -evnetTypeId : String
    -conditionValue : String
}

class TimeLimit<<时限实体类>>{
    id : String
    eventTypeId : EventType
    level : Kv
    timeLimit : int
}



class ComponentController<<部件界面类>>{
    -ComponentService
    -ComponentTypeService
    -ComponentInfoService
    +ComponentList(component):Component[*]         // 查询部件集合
    +ComponentTypeList():ComponentType[*]          // 获取部件分类集合
    +saveComponentList(Component[*]):boolean       // 保存部件
    +componentImport():boolean
    +objState() : Kv[*]
    +dataSource() : Kv[*]
    +grid() : Grid[*]
    +record(ComponentType): Record[*]
    +componentByRecordId(record) : Component[*]
}

class ComponentService<<部件业务类>>{
    -ComponentInfoService
    +getComponentList(component):Component[*]      // 查询部件集合
    +getComponent(component) :component
    +saveComponentList(component[*]): boolean
    +saveComponent(component) : boolean
    +savePublish(publis) : boolean
    +saveRecord(record,publish) : boolean 
    +getComponentByRecordId(record) : Component[*]
    +deleteComponent(component) : boolean
}
class ComponentTypeService<<部件分类业务类>>{
    +getComponentTypeList():ComponentType[*]       // 获取部件分类集合
    +getComponentType(component):ComponentType     // 获取部件分类
}

class PublisheController<<发布界面类>>{
    +getPublishList() : Publish[*]
    +getPublishOne() : Publish
    +layerPublish(publish) : boolean
}
class PublisheService<<发布业务类>>{
    +getPublishList() : Publish[*]
    +getPublishOne() : Publish
    +layerPublish(publish) : boolean
}

class RecordService<<编辑业务类>>{
    +save(record) : boolean 
    +update(record) : boolean
    +findAllByPublishId() : Record[*]
}
class ImportController<<导入界面类>>{
    +componentImport(layerName,layerSettingType,shpType) : String
    +gridImport(layerName,layerSettingType,shpType) : String
    +checkPublish(): boolean
}
class ImportService<<导入业务类>>{
    +componentImport(layerName,layerSettingType,shpType) : String
    +gridImport(layerName,layerSettingType,shpType) : String
    +checkPublish(): boolean
}

class GridController<<网格界面类>>{
    +getGridList() :  Grid[*]
    +gridSave(grid) : boolean
    +gridUpdate(grid) : boolean
    +getGridOne(grid) : Grid
    +gridDelete(grid) : boolean
}

class GridService<<网格业务类>>{
    +search(grid) : Grid[*]
    +delete(grid) : boolean
    +update(grid) : boolean

}






Dept --> User
Grid --> User
Grid --> Dept
Grid --> Record
Grid --> Publish
Grid --|> Kv
Component --> ComponentInfo
Component --> ComponentType
Component --> Record
Component --> Publish
ComponentInfo --|> Kv
Publish --> Record
Publish --|> Kv
Event --> EventFile
Event --> EventType
Event --> Condition
Event --|> Kv
EventType --> TimeLimit



ComponentController --> ComponentService
ComponentController --> ComponentTypeService
PublisheController --> PublisheService
ImportController --> ImportService
GridController --> GridService


GridService --> RecordService
GridService --> KVService
GridService --> UserService
PublishService --> RecordService
PublishService --> GridService
ComponentService --> PublishService
ComponentService --> RecordService
ComponentService --> ComponentTypeService



ComponentService ..> Component
PublisheService ..> Publish
RecordService ..> Record
ComponentTypeService ..> ComponentType




@enduml